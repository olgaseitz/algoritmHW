package com.company;

public class Main {

    public static void main(String[] args) {
    // Задание 1.1
        //Приведите пример алгоритмов и структур данных из жизни.

        //Примерами алгоритмов из жизни можно назвать приготовление блюда по рецепту или конвеерную сборку автомобилей.
        // Где исполнитель строго следует прописанной инструкции, дабы результат оказался правильным, а затраты ресурсов минимальны.

        //Примерами структур данных можно назвать генеалогическое древо или набор учебников по какому-либо предмету. Данные в учебниках упорядочены от простого к сложному.
        //Разделены на несколько книг - для каждого класса своя. В каждой книге данные разбиты на большие разделы, а разделы на отдельные параграфы.

    // Задание 1.2
        //Приведите пример алгоритмов и структур данных в программировании.

        //Примером алгоритма в программировании можно назвать циклы в Java.
        //Например цикл for когда мы инициализируем счетчик, код выполняется снова и снова пока не будет выполнено заданное условие.

        //Ярким же примером структуры данных в виде дерева является файловая система программы.

    // Задание 1.3
        // Напишите программный код, в котором все данные хранятся только в переменных трех типов данных:
        // Ссылочные, примитивные и своего класса содержащего: конструктор и метод отображения данных.
        // Выведите написанные данные.

        Employee[] employees = new Employee[2];
        employees[0] = new Employee("Davidson W.G.", 100000);
        employees[1] = new Employee("Smith W.",45000);

        employees[0].who();
        employees[1].who();
        System.out.println("------------------");

    // Задание 1.4
        // Дополните предыдущий код сравнением ваших данных с другой переменной, данный код должен имитировать простейший поиск перебором.
        // Оцените время выполнения алгоритма с помощью базового метода System.nanoTime().
        System.out.println("Дополнительные данные: ");

        Employee director = new Employee("Morgan J.",600000);
        director.who();
        System.out.println("------------------");
        System.out.println("Сравнение перебором: ");

        long lStartTime = System.nanoTime();
        
        for (int i = 0; i < 2;++i){
            if(director.getSalary() > employees[i].getSalary()){
                System.out.println("Директор зарабатывает больше сотрудника " +i);
            }
        }

        long lEndTime = System.nanoTime() - lStartTime;
        System.out.println("------------------");
        System.out.println("Время выполнения алгоритма: " + lEndTime);
    }

}
